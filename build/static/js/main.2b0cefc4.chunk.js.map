{"version":3,"sources":["components/Search.js","reportWebVitals.js","index.js"],"names":["Search","state","query","data","baseUrl","showMenu","handleQuery","stored_result","getFromLocalStorage","length","setState","searchInSpooncular","storeInLocalStorage","variable","created_dt","Date","getTime","stored_data","Object","assign","results","created","keys","localStorage","removeOldestStoredResults","setItem","JSON","stringify","search_history","parse","getItem","setFromLocalStorage","handleTextSearchChange","event","target","value","firstLetterToUpperCase","string","charAt","toUpperCase","slice","axios","get","this","then","res","catch","error","console","response","all_local_storage_results","oldest_search_result","forEach","variable_name","index","removeItem","stored_results","p","spacing","as","Container","maxW","textAlign","fontSize","placeholder","onChange","variantcolor","onClick","mt","map","result","columns","base","md","lg","ingredient","align","fontWeight","name","id","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b0cefc4.chunk.js","sourcesContent":["import {\r\n  ChakraProvider,\r\n  Box,\r\n  Container,\r\n  Heading,\r\n  Stack,\r\n  Input,\r\n  Button,\r\n  Text,\r\n  Select,\r\n  List,\r\n  ListItem,\r\n} from \"@chakra-ui/react\";\r\nimport { SearchIcon } from \"@chakra-ui/icons\";\r\nimport axios from \"axios\";\r\nimport React from \"react\";\r\n\r\nclass Search extends React.Component {\r\n  state = {\r\n    query: \"\",\r\n    data: [],\r\n    baseUrl: \"\",\r\n    showMenu: false,\r\n  };\r\n\r\n  searchInSpooncular() {\r\n    axios\r\n      .get(\r\n        `https://api.spoonacular.com/food/ingredients/search?apiKey=27abea2449fa44a398beafe2c390d86d&query=${this.state.query}&number=5`\r\n      )\r\n      .then((res) => {\r\n        this.setState(\r\n          { data: res.data.results, baseUrl: res.baseUrl, query: \"\" },\r\n          this.storeInLocalStorage(this.state.query, res.data.results)\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.response.data);\r\n      });\r\n  }\r\n\r\n  handleQuery = () => {\r\n    let stored_result = this.getFromLocalStorage(this.state.query);\r\n    if (stored_result.length) {\r\n      this.setState({ data: stored_result });\r\n    } else {\r\n      this.searchInSpooncular();\r\n    }\r\n  };\r\n\r\n  removeOldestStoredResults() {\r\n    let all_local_storage_results = Object.keys(localStorage) || [];\r\n    let oldest_search_result = all_local_storage_results[0];\r\n    all_local_storage_results.forEach(function (variable_name, index) {\r\n      let stored_result = localStorage.getItem(variable_name);\r\n      if (oldest_search_result.created > stored_result.created) {\r\n        oldest_search_result = variable_name;\r\n      }\r\n    });\r\n    localStorage.removeItem(oldest_search_result);\r\n  }\r\n\r\n  storeInLocalStorage = (variable, data) => {\r\n    let created_dt = new Date().getTime() / 1000;\r\n    let stored_data = Object.assign({}, { results: data, created: created_dt });\r\n    const amount_of_results_stored = Object.keys(localStorage).length;\r\n    if (amount_of_results_stored >= 10) {\r\n      this.removeOldestStoredResults();\r\n    }\r\n    localStorage.setItem(variable, JSON.stringify(stored_data));\r\n  };\r\n\r\n  getFromLocalStorage = (variable) => {\r\n    let search_history = JSON.parse(localStorage.getItem(variable)) || {};\r\n    return search_history.length ? search_history : [];\r\n  };\r\n\r\n  setFromLocalStorage = (variable) => {\r\n    let search_history = JSON.parse(localStorage.getItem(variable)) || {};\r\n    this.setState({ data: search_history?.results });\r\n  };\r\n\r\n  handleTextSearchChange = (event) => {\r\n    this.setState({ query: event.target.value });\r\n  };\r\n\r\n  firstLetterToUpperCase = (string = \"\") => {\r\n    return `${string.charAt(0).toUpperCase()}${string.slice(1)}`;\r\n  };\r\n\r\n  render() {\r\n    const stored_results = Object.keys(localStorage) || [];\r\n    const data = this.state.data || [];\r\n    return (\r\n      <ChakraProvider>\r\n        <Box p={4}>\r\n          <Stack spacing={4} as={Container} maxW={\"3xl\"} textAlign={\"center\"}>\r\n            <Heading fontSize={\"3xl\"}>Spooncular API Search</Heading>\r\n            <Input placeholder=\"Please type query\" onChange={this.handleTextSearchChange} />\r\n            <Button variantcolor=\"teal\" onClick={this.handleQuery}>\r\n              <SearchIcon>Search</SearchIcon>\r\n            </Button>\r\n            <Container mt={6}>\r\n              <Heading fontSize={\"3xl\"}>Stored Results</Heading>\r\n              <Select\r\n                onClick={(event) => this.setFromLocalStorage(event.target.value)}\r\n                placeholder=\"Select from stored results\"\r\n              >\r\n                {stored_results.map((result) => (\r\n                  <option key={result} value={result}>\r\n                    {this.firstLetterToUpperCase(result)}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </Container>\r\n          </Stack>\r\n\r\n          <Container maxW={\"6xl\"} mt={10}>\r\n            <List columns={{ base: 1, md: 2, lg: 4 }} spacing={10}>\r\n              {data.length\r\n                ? this.state.data.map((ingredient) => (\r\n                    <ListItem key={ingredient.id} align={\"top\"}>\r\n                      <Text fontWeight={600}>{ingredient.name}</Text>\r\n                    </ListItem>\r\n                  ))\r\n                : null}\r\n            </List>\r\n          </Container>\r\n        </Box>\r\n      </ChakraProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Search from \"./components/Search\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Search />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}